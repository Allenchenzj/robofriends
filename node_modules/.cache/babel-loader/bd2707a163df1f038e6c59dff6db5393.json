{"ast":null,"code":"var _jsxFileName = \"/Users/zhijiechen/Desktop/robofriends/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    //searchField is to be used as props by the App component\n    // come from the state.searchRobots.searchField from reducers\n    //becasue in index.js we create the store with search robot \n    //reducer, listen to state change\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n}; //dispatch is what triggers action in flux, action is dispatched\n//into the reducer, dispatch is to send action\n//action is just a function return object, we want dispatch that,\n//so the reducers are aware of it and when dispatch setSearchField\n//would listen to the text user enter (event.target.value)\n\n\nconst mapDispatchToProps = dispatch => {\n  //onSearchChange is what props is named,it receives a event, which is dipatch the\n  //action setSearchField\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onReqestRobots: () => requestRobots(dispatch)\n  };\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [] // searchfield: ''\n\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => {\n      this.setState({\n        robots: users\n      });\n    });\n  } // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n\n  render() {\n    const {\n      robots\n    } = this.state;\n    const {\n      searchField,\n      onSearchChange\n    } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return !robots.length ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"f1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"RoboFriends\"), React.createElement(SearchBox, {\n      searchChange: onSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(Scroll, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(CardList, {\n      robots: filteredRobots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n} // connect is higher order function which is a function return\n//another function, connect is going to run and whatever connect\n//does in this function is going to return another function with\n// App run inside\n//right now connect the App component and subscribe to any state \n//changes in the redux store ,now needs to tell it what it interested\n//in (what state should listen to. what dispatch or what action\n//should i listen to)\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/zhijiechen/Desktop/robofriends/src/containers/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","setSearchField","mapStateToProps","state","searchField","searchRobots","robots","requestRobots","isPending","error","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onReqestRobots","App","constructor","componentDidMount","fetch","then","response","json","users","setState","render","props","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,WAAP;AAEA,SAAQC,cAAR,QAA6B,YAA7B;;AAIA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAM;AACJ;AACA;AACA;AACA;AACAC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAL5B;AAMJE,IAAAA,MAAM,EAAEH,KAAK,CAACI,aAAN,CAAoBD,MANxB;AAOJE,IAAAA,SAAS,EAAEL,KAAK,CAACI,aAAN,CAAoBC,SAP3B;AAQJC,IAAAA,KAAK,EAAEN,KAAK,CAACI,aAAN,CAAoBE;AARvB,GAAN;AAWD,CAZD,C,CAeA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC;AACA;AACA,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACV,cAAc,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAD9B;AAELC,IAAAA,cAAc,EAAE,MAAMT,aAAa,CAACI,QAAD;AAF9B,GAAP;AAID,CAPD;;AAUA,MAAMM,GAAN,SAAkBrB,SAAlB,CAA4B;AAC1BsB,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKf,KAAL,GAAa;AACXG,MAAAA,MAAM,EAAE,EADG,CAEX;;AAFW,KAAb;AAID;;AAEDa,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADnB,EAEGF,IAFH,CAEQG,KAAK,IAAI;AAAC,WAAKC,QAAL,CAAc;AAAEnB,QAAAA,MAAM,EAAEkB;AAAV,OAAd;AAAgC,KAFlD;AAGD,GAbyB,CAe1B;AACA;AACA;;;AAEAE,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEpB,MAAAA;AAAF,QAAY,KAAKH,KAAvB;AACA,UAAM;AAACC,MAAAA,WAAD;AAAcQ,MAAAA;AAAd,QAAgC,KAAKe,KAA3C;AACA,UAAMC,cAAc,GAAGtB,MAAM,CAACuB,MAAP,CAAcC,KAAK,IAAG;AAC3C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkC7B,WAAW,CAAC4B,WAAZ,EAAlC,CAAP;AACD,KAFsB,CAAvB;AAGA,WAAO,CAAC1B,MAAM,CAAC4B,MAAR,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK,GAGH;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEtB,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAEgB,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF,CAHJ;AAWD;;AApCyB,C,CAuC5B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,eAAe/B,OAAO,CAACK,eAAD,EAAkBQ,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport {setSearchField} from '../actions';\n\n\n\nconst mapStateToProps = state => {  \n  return{\n    //searchField is to be used as props by the App component\n    // come from the state.searchRobots.searchField from reducers\n    //becasue in index.js we create the store with search robot \n    //reducer, listen to state change\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n\n  }\n}\n\n\n//dispatch is what triggers action in flux, action is dispatched\n//into the reducer, dispatch is to send action\n//action is just a function return object, we want dispatch that,\n//so the reducers are aware of it and when dispatch setSearchField\n//would listen to the text user enter (event.target.value)\nconst mapDispatchToProps = (dispatch) => {\n  //onSearchChange is what props is named,it receives a event, which is dipatch the\n  //action setSearchField\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onReqestRobots: () => requestRobots(dispatch)\n  }\n}\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      // searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n  // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n  render() {\n    const { robots} = this.state;\n    const {searchField, onSearchChange} = this.props;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// connect is higher order function which is a function return\n//another function, connect is going to run and whatever connect\n//does in this function is going to return another function with\n// App run inside\n\n//right now connect the App component and subscribe to any state \n//changes in the redux store ,now needs to tell it what it interested\n//in (what state should listen to. what dispatch or what action\n//should i listen to)\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n"]},"metadata":{},"sourceType":"module"}