{"ast":null,"code":"var _jsxFileName = \"/Users/zhijiechen/Desktop/robofriends/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    //searchField is to be used as props by the App component\n    // come from the state.searchRobots.searchField from reducers\n    //becasue in index.js we create the store with search robot \n    //reducer, listen to state change\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  };\n}; //dispatch is what triggers action in flux, action is dispatched\n//into the reducer, dispatch is to send action\n//action is just a function return object, we want dispatch that,\n//so the reducers are aware of it and when dispatch setSearchField\n//would listen to the text user enter (event.target.value)\n\n\nconst mapDispatchToProps = dispatch => {\n  //onSearchChange is what props is named,it receives a event, which is dipatch the\n  //action setSearchField\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    //dispatch return a function\n    onReqestRobots: () => requestRobots(dispatch)\n  };\n};\n\nclass App extends Component {\n  //we don't need contructor any more because there's no\n  // more state. this robots are going to be returned as\n  // part of the props from onRequestRobots\n  // constructor() {\n  //   super()\n  //   this.state = {\n  //     robots: [],\n  //     // searchfield: ''\n  //   }\n  // }\n  componentDidMount() {\n    this.props.onReqestRobots();\n  } // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n\n  render() {\n    // const { robots} = this.state;\n    //come from props\n    const {\n      searchField,\n      onSearchChange,\n      robots,\n      isPending\n    } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    }); // return !robots.length ?\n\n    return isPending ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"f1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"RoboFriends\"), React.createElement(SearchBox, {\n      searchChange: onSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(Scroll, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(CardList, {\n      robots: filteredRobots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })));\n  }\n\n} // connect is higher order function which is a function return\n//another function, connect is going to run and whatever connect\n//does in this function is going to return another function with\n// App run inside\n//right now connect the App component and subscribe to any state \n//changes in the redux store ,now needs to tell it what it interested\n//in (what state should listen to. what dispatch or what action\n//should i listen to)\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/zhijiechen/Desktop/robofriends/src/containers/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","setSearchField","requestRobots","mapStateToProps","state","searchField","searchRobots","robots","isPending","error","mapDispatchToProps","dispatch","onSearchChange","event","target","value","onReqestRobots","App","componentDidMount","props","render","filteredRobots","filter","robot","name","toLowerCase","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,WAAP;AAEA,SAAQC,cAAR,EAAwBC,aAAxB,QAA4C,YAA5C;;AAIA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAM;AACJ;AACA;AACA;AACA;AACAC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD,WAL5B;AAMJE,IAAAA,MAAM,EAAEH,KAAK,CAACF,aAAN,CAAoBK,MANxB;AAOJC,IAAAA,SAAS,EAAEJ,KAAK,CAACF,aAAN,CAAoBM,SAP3B;AAQJC,IAAAA,KAAK,EAAEL,KAAK,CAACF,aAAN,CAAoBO;AARvB,GAAN;AAWD,CAZD,C,CAeA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACvC;AACA;AACA,SAAO;AACLC,IAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACV,cAAc,CAACY,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CAD9B;AAGL;AACAC,IAAAA,cAAc,EAAE,MAAMd,aAAa,CAACS,QAAD;AAJ9B,GAAP;AAOD,CAVD;;AAaA,MAAMM,GAAN,SAAkBrB,SAAlB,CAA4B;AAE1B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAsB,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,KAAL,CAAWH,cAAX;AACH,GAhByB,CAkB1B;AACA;AACA;;;AAEAI,EAAAA,MAAM,GAAG;AACP;AAEA;AACA,UAAM;AAACf,MAAAA,WAAD;AAAcO,MAAAA,cAAd;AAA8BL,MAAAA,MAA9B;AAAsCC,MAAAA;AAAtC,QAAmD,KAAKW,KAA9D;AAEA,UAAME,cAAc,GAAGd,MAAM,CAACe,MAAP,CAAcC,KAAK,IAAG;AAC3C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCrB,WAAW,CAACoB,WAAZ,EAAlC,CAAP;AACD,KAFsB,CAAvB,CANO,CASP;;AACA,WAAOjB,SAAS,GACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADc,GAGZ;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAEI,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAES,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF,CAHJ;AAWD;;AA3CyB,C,CA8C5B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,eAAexB,OAAO,CAACM,eAAD,EAAkBO,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport {setSearchField, requestRobots} from '../actions';\n\n\n\nconst mapStateToProps = state => {  \n  return{\n    //searchField is to be used as props by the App component\n    // come from the state.searchRobots.searchField from reducers\n    //becasue in index.js we create the store with search robot \n    //reducer, listen to state change\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n\n  }\n}\n\n\n//dispatch is what triggers action in flux, action is dispatched\n//into the reducer, dispatch is to send action\n//action is just a function return object, we want dispatch that,\n//so the reducers are aware of it and when dispatch setSearchField\n//would listen to the text user enter (event.target.value)\nconst mapDispatchToProps = (dispatch) => {\n  //onSearchChange is what props is named,it receives a event, which is dipatch the\n  //action setSearchField\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\n    //dispatch return a function\n    onReqestRobots: () => requestRobots(dispatch)\n  }\n\n}\n\n\nclass App extends Component {\n\n  //we don't need contructor any more because there's no\n  // more state. this robots are going to be returned as\n  // part of the props from onRequestRobots\n\n  // constructor() {\n  //   super()\n  //   this.state = {\n  //     robots: [],\n  //     // searchfield: ''\n  //   }\n  // }\n\n  componentDidMount() {\n      this.props.onReqestRobots();\n  }\n\n  // onSearchChange = (event) => {\n  //   this.setState({ searchfield: event.target.value })\n  // }\n\n  render() {\n    // const { robots} = this.state;\n    \n    //come from props\n    const {searchField, onSearchChange, robots, isPending} = this.props;\n\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    // return !robots.length ?\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// connect is higher order function which is a function return\n//another function, connect is going to run and whatever connect\n//does in this function is going to return another function with\n// App run inside\n\n//right now connect the App component and subscribe to any state \n//changes in the redux store ,now needs to tell it what it interested\n//in (what state should listen to. what dispatch or what action\n//should i listen to)\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n"]},"metadata":{},"sourceType":"module"}