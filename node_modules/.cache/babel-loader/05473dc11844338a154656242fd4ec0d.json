{"ast":null,"code":"var _jsxFileName = \"/Users/zhijiechen/Desktop/robofriends/src/containers/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { SetSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    //searchField is to be used as props by the App component\n    // come from the state.searchRobots.searchField from reducers\n    //becasue in index.js we create the store with search robot \n    //reducer\n    searchField: state.searchRobots.searchField\n  };\n}; //dispatch is what triggers action in flux, action is dispatched\n//into the reducer, dispatch is to send action\n//action is just a function return object, we want dispatch that,\n//so the reducers are aware of it and when dispatch setSearchField\n//would listen to the text user enter (event.target.value)\n\n\nconst mapDispatchToProps = dispatch => {\n  //what props is named,it receives a event, which is dipatch the\n  //action setSearchField\n  onSearchChange: event => dispatch(setSearchField(event.target.value));\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.onSearchChange = event => {\n      this.setState({\n        searchfield: event.target.value\n      });\n    };\n\n    this.state = {\n      robots: [],\n      searchfield: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => {\n      this.setState({\n        robots: users\n      });\n    });\n  }\n\n  render() {\n    const {\n      robots,\n      searchfield\n    } = this.state;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    return !robots.length ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Loading\") : React.createElement(\"div\", {\n      className: \"tc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"f1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"RoboFriends\"), React.createElement(SearchBox, {\n      searchChange: this.onSearchChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Scroll, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(CardList, {\n      robots: filteredRobots,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    })));\n  }\n\n} // connect is higher order function which is a function return\n//another function, connect is going to run and whatever connect\n//does in this function is going to return another function with\n// App run inside\n//right now connect the App component and subscribe to any state \n//changes in the redux store now needs to tell it what it interested\n//in (what state should listen to. what dispatch or what action\n//should i listen to)\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/zhijiechen/Desktop/robofriends/src/containers/App.js"],"names":["React","Component","connect","CardList","SearchBox","Scroll","SetSearchField","mapStateToProps","state","searchField","searchRobots","mapDispatchToProps","dispatch","onSearchChange","event","setSearchField","target","value","App","constructor","setState","searchfield","robots","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAO,WAAP;AAEA,SAAQC,cAAR,QAA6B,YAA7B;;AAGA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAM;AACJ;AACA;AACA;AACA;AACAC,IAAAA,WAAW,EAAED,KAAK,CAACE,YAAN,CAAmBD;AAL5B,GAAN;AAQD,CATD,C,CAYA;AACA;AACA;AACA;AACA;;;AACA,MAAME,kBAAkB,GAAIC,QAAD,IAAc;AACvC;AACA;AACAC,EAAAA,cAAc,EAAGC,KAAD,IAAWF,QAAQ,CAACG,cAAc,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAf,CAAnB;AACjB,CAJD;;AAOA,MAAMC,GAAN,SAAkBjB,SAAlB,CAA4B;AAC1BkB,EAAAA,WAAW,GAAG;AACZ;;AADY,SAcdN,cAdc,GAcIC,KAAD,IAAW;AAC1B,WAAKM,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAEP,KAAK,CAACE,MAAN,CAAaC;AAA5B,OAAd;AACD,KAhBa;;AAEZ,SAAKT,KAAL,GAAa;AACXc,MAAAA,MAAM,EAAE,EADG;AAEXD,MAAAA,WAAW,EAAE;AAFF,KAAb;AAID;;AAEDE,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAGA,QAAQ,CAACC,IAAT,EADnB,EAEGF,IAFH,CAEQG,KAAK,IAAI;AAAC,WAAKR,QAAL,CAAc;AAAEE,QAAAA,MAAM,EAAEM;AAAV,OAAd;AAAgC,KAFlD;AAGD;;AAMDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA,MAAF;AAAUD,MAAAA;AAAV,QAA0B,KAAKb,KAArC;AACA,UAAMsB,cAAc,GAAGR,MAAM,CAACS,MAAP,CAAcC,KAAK,IAAG;AAC3C,aAAOA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCd,WAAW,CAACa,WAAZ,EAAlC,CAAP;AACD,KAFsB,CAAvB;AAGA,WAAO,CAACZ,MAAM,CAACc,MAAR,GACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK,GAGH;AAAK,MAAA,SAAS,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAE,KAAKvB,cAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,MAAM,EAAEiB,cAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF,CAHJ;AAWD;;AAnCyB,C,CAsC5B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AACA,eAAe5B,OAAO,CAACK,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CO,GAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport {SetSearchField} from '../actions'\n\n\nconst mapStateToProps = state => {  \n  return{\n    //searchField is to be used as props by the App component\n    // come from the state.searchRobots.searchField from reducers\n    //becasue in index.js we create the store with search robot \n    //reducer\n    searchField: state.searchRobots.searchField\n\n  }\n}\n\n\n//dispatch is what triggers action in flux, action is dispatched\n//into the reducer, dispatch is to send action\n//action is just a function return object, we want dispatch that,\n//so the reducers are aware of it and when dispatch setSearchField\n//would listen to the text user enter (event.target.value)\nconst mapDispatchToProps = (dispatch) => {\n  //what props is named,it receives a event, which is dipatch the\n  //action setSearchField\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value))\n}\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response=> response.json())\n      .then(users => {this.setState({ robots: users})});\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    })\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// connect is higher order function which is a function return\n//another function, connect is going to run and whatever connect\n//does in this function is going to return another function with\n// App run inside\n\n//right now connect the App component and subscribe to any state \n//changes in the redux store now needs to tell it what it interested\n//in (what state should listen to. what dispatch or what action\n//should i listen to)\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n"]},"metadata":{},"sourceType":"module"}